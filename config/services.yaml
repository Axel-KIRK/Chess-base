# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    profile_directory: '%kernel.project_dir%/public/media/cache/thumb_profile/uploads/images'
    nav_directory: '%kernel.project_dir%/public/media/cache/thumb_nav/uploads/images'
    picture_directory: '%kernel.project_dir%/public/uploads/images'

    locale: 'fr'
    my_user_provider.class: App\Utils\FOSUBUserProvider
    
    
services:
    # app_user.first_login:
    #     class: App\EventListener\FirstLoginListener
    #     arguments: ['@date']
        

    my_user_provider:
        
        public: true
        class: "%my_user_provider.class%"
        #this is the place where the properties are passed to the UserProvider - see config.yml
        arguments: 
            - '@fos_user.user_manager'
            - [{facebook: facebook_id, google: google_id}]
           
        # facebook: facebook_id,
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,FOSUBUserProvider.php}'


    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Controller\ProfileController:
        arguments:
            $formFactory: '@fos_user.profile.form.factory'

    app.form.profile:
        class: App\Form\ProfileFormType
        tags:
            - { name: form.type, alias: app_user_profile }

    app_chat.topic:
        class: App\Utils\Topic\ChatTopic
    
    app_matchMaking.topic:
        class: App\Utils\Topic\MatchMakingTopic
    
    app_game.topic:
        class: App\Utils\Topic\GameTopic
    
    app_invitation.topic:
        class: App\Utils\Topic\InvitationTopic

#             or register via "app/config/config.yml"

    #alias necessaire pour pouvoir appeler le service dans les differents topic.
    Gos\Bundle\WebSocketBundle\Client\ClientManipulatorInterface: '@gos_web_socket.websocket.client_manipulator'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - !service { class: PDO, factory: 'database_connection:getWrappedConnection' }
            - {lock_mode: 0}