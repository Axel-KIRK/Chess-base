<?php

namespace App\Controller;

use App\Entity\Article;
use App\Form\ArticleType;
use App\Repository\ArticleRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Knp\Component\Pager\PaginatorInterface;
use App\Entity\ArticleAnswer;
use App\Form\ArticleAnswerType;
use App\Repository\ArticleAnswerRepository;

/**
 * @Route("/blog")
 */
class ArticleController extends AbstractController
{
    
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    
    /**
     * @Route("/", name="article_index", methods="GET")
     */
    public function index(ArticleRepository $articleRepository, PaginatorInterface $paginator, Request $request): Response
    {

        $queryBuilder = $articleRepository->findAllArticleByDate();

        $pagination = $paginator->paginate(
            $queryBuilder,
            $request->query->getInt('page', 1),
            3
        );
        return $this->render('article/index.html.twig', ['articles' => $pagination]);
    }

    /**
     * @Route("/new", name="article_new", methods="GET|POST")
     */
    public function new(Request $request): Response
    {
        if ($this->isGranted('ROLE_REDACTEUR')) {
            $article = new Article();
            $form = $this->createForm(ArticleType::class, $article);
            $form->handleRequest($request);

            if ($form->isSubmitted() && $form->isValid()) {
                $previewImage = $article->getPreviewImage();

                if (null !== $previewImage) {
                    $fileName = $this->generateUniqueFileName().'.'.$previewImage->guessExtension();
                    // Déplacement du fichier dans un répertoire de notre projet
                    $previewImage->move($this->getParameter('picture_directory'), $fileName);
                    // Met à jour le nom de l'image finale dans notre user
                    $article->setPreviewImage($fileName);
                }
                
                $user =$this->getUser();
                $article->setAuthor($user)
                ->setPublishAt(new \DateTime());
            
                $em = $this->getDoctrine()->getManager();
                $em->persist($article);
                $em->flush();

                return $this->redirectToRoute('article_index');
            }

            return $this->render('article/new.html.twig', [
            'article' => $article,
            'form' => $form->createView(),
            ]);
        }
        throw $this->createAccessDeniedException('You cannot access this page!');
    }

    /**
     * @Route("/{id}", name="article_show", methods="GET|POST")
     */
    public function show(Article $article, Request $request, ArticleAnswerRepository $articleAnswerRepository, PaginatorInterface $paginator): Response
    {
        $articleAnswer = new ArticleAnswer();
        $form = $this->createForm(ArticleAnswerType::class, $articleAnswer);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $articleAnswer->setArticle($article);
            $user =$this->getUser();
            $articleAnswer->setAuthor($user)
                ->setPublishAt(new \DateTime());

            $em = $this->getDoctrine()->getManager();
            $em->persist($articleAnswer);
            $em->flush();
        }
        $queryBuilder = $articleAnswerRepository->findAllArticleAnswerByArticleByDate($article);
        $pagination = $paginator->paginate(
            $queryBuilder,
            $request->query->getInt('page', 1),
            3
        );

        return $this->render('article/show.html.twig', [
            'article' => $article,
            'form' => $form->createView(),
            'answers' => $pagination,
            ]);
    }

    /**
     * @Route("/{id}/edit", name="article_edit", methods="GET|POST")
     */
    public function edit(Request $request, Article $article): Response
    {
        if ($this->getUser() === $article->getAuthor() || $this->isGranted('ROLE_ADMIN')) {
            $oldPreviewImage = $article->getPreviewImage();
            
            $form = $this->createForm(ArticleType::class, $article);
            $form->handleRequest($request);

            if ($form->isSubmitted() && $form->isValid()) {         
                
                $previewImage = $article->getPreviewImage();
                if (!is_null($previewImage)) {
                    // Récupération du champ image du formulaire reçu
                    // Génère un nom unique pour le fichier avant de le sauvegarder
                    $fileName = $this->generateUniqueFileName().'.'.$previewImage->guessExtension();
                    // Déplacement du fichier dans un répertoire de notre projet
                    $previewImage->move($this->getParameter('picture_directory'), $fileName);
                    // Met à jour le nom de l'image finale dans notre article
                    $article->setPreviewImage($fileName);
                    // Ne pas oublier d'inclure le if suivant et non le mettre indépendant...
                    if (!is_null($oldPreviewImage)) { // Cette ligne permet d'éviter une erreur lors de l'edit du null
                        $imagePathProfileThumb = $this->getParameter('profile_directory') . DIRECTORY_SEPARATOR . $oldPreviewImage;
                        unlink($imagePathProfileThumb);
                        $imagePathPicture = $this->getParameter('picture_directory') . DIRECTORY_SEPARATOR . $oldPreviewImage;
                        unlink($imagePathPicture);
                        $imagePathNavThumb = $this->getParameter('nav_directory') . DIRECTORY_SEPARATOR . $oldPreviewImage;
                        unlink($imagePathNavThumb);
                    }
                }else{
                    $article->setPreviewImage($oldPreviewImage);
                }
                

                $this->getDoctrine()->getManager()->flush();

                return $this->redirectToRoute('article_show', ['id' => $article->getId()]);
            }

            return $this->render('article/edit.html.twig', [
            'article' => $article,
            'form' => $form->createView(),
        ]);
        }
        throw $this->createAccessDeniedException('You cannot access this page!');
    }

    /**
     * @Route("/{id}", name="article_delete", methods="DELETE")
     */
    public function delete(Request $request, Article $article): Response
    {
        if ($this->getUser() === $article->getAuthor() || $this->isGranted('ROLE_ADMIN')) {
            if ($this->isCsrfTokenValid('delete'.$article->getId(), $request->request->get('_token'))) {
                $em = $this->getDoctrine()->getManager();
                $em->remove($article);
                $em->flush();
            }

            return $this->redirectToRoute('article_index');
        }
        throw $this->createAccessDeniedException('You cannot access this page!');
    }
   
}
