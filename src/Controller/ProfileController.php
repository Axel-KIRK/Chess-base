<?php
namespace App\Controller;


use Symfony\Component\Routing\Annotation\Route;
use FOS\UserBundle\Controller\ProfileController as BaseController;
use FOS\UserBundle\Event\FilterUserResponseEvent;
use FOS\UserBundle\Event\FormEvent;
use FOS\UserBundle\Event\GetResponseUserEvent;
use FOS\UserBundle\Form\Factory\FactoryInterface;
use FOS\UserBundle\FOSUserEvents;
use FOS\UserBundle\Model\UserInterface;
use FOS\UserBundle\Model\UserManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use App\Form\ProfileFormType;
use Symfony\Component\HttpFoundation\File\File;
use App\Entity\Stats;

class ProfileController extends Controller
{
    private $eventDispatcher;
    private $formFactory;
    private $userManager;
    public function __construct(EventDispatcherInterface $eventDispatcher, FactoryInterface $formFactory, UserManagerInterface $userManager)
    {
        $this->eventDispatcher = $eventDispatcher;
        $this->formFactory = $formFactory;
        $this->userManager = $userManager;
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/profile/{id}", name="profileShow")
     */
    // La route ne peut pas être /profile/{id} car elle entrerait en conflit avec l'edit, la route /profile est toujours disponible pour accéder à son propre profil.

    public function ShowProfile($id)
    {
        
        $em = $this->getDoctrine()->getManager();
        $user = $em->getRepository('App:User')->find($id);
        $stats = $em->getRepository('App:Stats')->find($id);
        if($stats === null) {
            return $this->render('bundles/FOSUserBundle/Profile/show.html.twig', array(
                'user' => $user,
            ));
        } else {
        return $this->render('bundles/FOSUserBundle/Profile/show.html.twig', array(
            'user' => $user,
            'stats' => $stats,
        )); }
    }



    /**
     * @Route("/edit/{id}", name="profileEdit")
     *
     * @param Request $request
     *
     * @return Response
     */
    public function editAction(Request $request)
    {
        
        $user = $this->getUser();

        $currentImage = $user->getProfilePicture();

        if(!empty($currentImage) && file_exists($currentImage)){
            $imagePath = $this->getParameter('picture_directory') . DIRECTORY_SEPARATOR . $currentImage;
            
            /*
            je remplace la valeur initiale qui contenait uniquement le nom du fichier par un objet du type file
            Attention :  quand je recupere un nom de fichier de la base c'est un objet du type File qui est attendu
            En revanche , quand je créé / upload un nouveau fichier , c'est un objet du type FileUpload qui sera attendu
           */
                $user->setProfilePicture(new File($imagePath));
        } else {
            $user->setProfilePicture(null);
        }

        //     //var_dump(new File($imagePath));die;
        
        if (!is_object($user) || !$user instanceof UserInterface) {
            throw new AccessDeniedException('This user does not have access to this section.');
        }

        $event = new GetResponseUserEvent($user, $request);
        $this->eventDispatcher->dispatch(FOSUserEvents::PROFILE_EDIT_INITIALIZE, $event);

        if (null !== $event->getResponse()) {
            return $event->getResponse();
        }

        $form = $this->formFactory->createForm();
        $form->setData($user);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Gestion Avatar
            $picture = $user->getProfilePicture();
            if(is_null($picture)) {
                $default = 'default-chess.jpg';
                $user->setProfilePicture($default);
            }
            if(!is_null($picture)) {
                // Récupération du champ image du formulaire reçu
                $file = $user->getProfilePicture();
                // Génère un nom unique pour le fichier avant de le sauvegarder
                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                // Déplacement du fichier dans un répertoire de notre projet
                $file->move($this->getParameter('picture_directory'), $fileName);
                // Met à jour le nom de l'image finale dans notre user
                $user->setProfilePicture($fileName);

                $imagePathProfileThumb = $this->getParameter('profile_directory') . DIRECTORY_SEPARATOR . $currentImage;
                unlink($imagePathProfileThumb);
                $imagePathPicture = $this->getParameter('picture_directory') . DIRECTORY_SEPARATOR . $currentImage;
                unlink($imagePathPicture);
                $imagePathNavThumb = $this->getParameter('nav_directory') . DIRECTORY_SEPARATOR . $currentImage;
                unlink($imagePathNavThumb);
            }
            else {
                // Si fichier non remplacé, on lui passe le nom du fichier actuel
                // car $user a été modifié au traitement du formulaire
                $user->setProfilePicture($currentImage);
            }
            //  Fin Gestion Avatar.
            $event = new FormEvent($form, $request);
            $this->eventDispatcher->dispatch(FOSUserEvents::PROFILE_EDIT_SUCCESS, $event);

            $this->userManager->updateUser($user);

            if (null === $response = $event->getResponse()) { 
                $url = $this->generateUrl('profileShow',['id' => $user->getId()]);
                $response = new RedirectResponse($url);
            }

            $this->eventDispatcher->dispatch(FOSUserEvents::PROFILE_EDIT_COMPLETED, new FilterUserResponseEvent($user, $request, $response));

            return $response;
        }

        return $this->render('bundles/FOSUserBundle/Profile/edit.html.twig', array(
            'user' => $user,
            'form' => $form->createView(),
        ));
    }
}